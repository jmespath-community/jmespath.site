<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JMESPath</title><link>https://jmespath.site/</link><description>Recent content on JMESPath</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jmespath.site/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://jmespath.site/wiki/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jmespath.site/wiki/examples/</guid><description>Filters and Multiselect Lists One of the most common usage scenarios for JMESPath is being able to take a complex JSON document and simplify it down. The main features at work here are filters and multiselects. In this example below, we&amp;rsquo;re taking the array of people and, for any element with an age key whose value is greater than 20, we&amp;rsquo;re creating a sub list of the name and age values.</description></item><item><title/><link>https://jmespath.site/wiki/frequently-used-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jmespath.site/wiki/frequently-used-patterns/</guid><description>Common requests To achieve this… …write JMESPath expression Description x ? y : z (x &amp;amp;&amp;amp; y) || z Ternary operator How to Ternary operator</description></item><item><title/><link>https://jmespath.site/wiki/home/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jmespath.site/wiki/home/</guid><description>Welcome to the JMESPath wiki!
Tutorial : Introduction to JMESPath and its features Examples : Examples of how to use basic functionality and syntax Frequently Used Patterns : common JMESPath challenges, tips and tricks. Libraries : Libraries implementing JMESPath for various programming languages</description></item><item><title/><link>https://jmespath.site/wiki/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jmespath.site/wiki/libraries/</guid><description>The JMESPath specification is implemented in various languages. Each list below shows JMESPath libraries as well as the compliance level. The compliance level is based on which compliance tests the library can pass.
Language Name Compliance Level C++ jmespath.cpp Fully compliant .NET jmespath.net Elixir ex-jmes Fully compliant Go go-jmespath Fully compliant Java jmespath-java Fully compliant Lua jmespath.lua Fully compliant Javascript jmespath.js Fully compliant PHP jmespath.php Fully compliant Python jmespath.py Fully compliant Ruby jmespath.</description></item><item><title/><link>https://jmespath.site/wiki/ternary-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jmespath.site/wiki/ternary-operator/</guid><description>Problem statement Most languages have support for simple conditions:
if x then y else z Popular languages also support combining a condition to return a particular value for assignment, using the ternary operator:
x ? y : z Does JMESPath support the ternary operator? How to assign based on a condition? How to JMESPath supports logical operators with Or Expression || and And Expressions &amp;amp;&amp;amp;.
JMESPath has a peculiar concept of falsy values.</description></item><item><title/><link>https://jmespath.site/wiki/tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jmespath.site/wiki/tutorial/</guid><description>JMESPath is a query language for JSON. You can extract and transform elements from a JSON document. The examples below are interactive. You can change the JMESPath expressions and see the results update automatically.
For each of these examples, the JMESPath expression is applied to the input JSON on the left, and the result of evaluating the JMESPath expression is shown in the JSON document on the right-hand side.
Basic Expressions The simplest JMESPath expression is an identifier, which selects a key in an JSON object:</description></item></channel></rss>